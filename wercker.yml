box: node:6.10
build:
  steps:
    - script:
        name: A step that executes `npm install` command
        code: npm install  

push-to-releases:
  steps:
    # Push to public docker repo Container Registry (CR)
    - internal/docker-push:
        repository: wcr.io/$WERCKER_APPLICATION_OWNER_NAME/$WERCKER_APPLICATION_NAME
        tag: $WERCKER_GIT_BRANCH-$WERCKER_GIT_COMMIT
        cmd: node /pipeline/source/app.js

deploy-to-oke:
  box:
        id: alpine
        cmd: /bin/sh
  steps:
    - bash-template
    
    - kubectl:
        name: kubectl version
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: version

    - script:
      name: Install istioctl
      code: |
        pwd
        echo "Installing istioctl"
        curl -L --compressed https://github.com/istio/istio/releases/download/0.2.7/istio-0.2.7-linux.tar.gz | tar -xz -C $PWD && export PATH=${PWD}/istio-0.2.7/bin:$PATH
        pwd
        
    - script:
      name: Check istioctl version
      code: |
        echo "Checking istioctl version"
        istioctl version
        
    - script:
      name: generate and save kubeconfig
      code: |
        mkdir -p /root/.kube
        echo "
        apiVersion: v1
        clusters:
          - cluster:
              insecure-skip-tls-verify: true
              server: ${KUBERNETES_MASTER}
            name: cluster-${KUBERNETES_CLUSTER_ID}
        contexts:
          - context:
              cluster: cluster-${KUBERNETES_CLUSTER_ID}
              user: user-${KUBERNETES_CLUSTER_ID}
            name: context-${KUBERNETES_CLUSTER_ID}
        current-context: context-${KUBERNETES_CLUSTER_ID}
        kind: ""
        users:
          - name: user-${KUBERNETES_CLUSTER_ID}
            user:
              token: ${KUBERNETES_TOKEN}
        " > /root/.kube/config
        
    - script:
        name: "Visualise Kubernetes config"
        code: cat kubernetes-deployment.yml
    
    - kubectl:
        name: create OCR secret
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: create secret docker-registry wrelease --docker-server=wcr.io --docker-username=$WERCKER_APPLICATION_OWNER_NAME --docker-password=$KUBERNETES_TOKEN --docker-email=$DOCKER_EMAIL
        
    - kubectl:
        name: create deplyoment
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: apply -f <(istioctl kube-inject -f kubernetes-deployment.yml)

    - kubectl:
        name: get LoadBalancer public IP address
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: get svc -o jsonpath='{.items[*].status.loadBalancer.ingress[*].ip}' --all-namespaces

functional-test:
  steps:
    - script:
        name: Run and Test microservice
        code: |
              mkdir -p "/pipeline"
              node $WERCKER_ROOT/app.js &
              sleep 5
              CREDITSCORE_URL=http://localhost:3000/creditscore
              echo 'Microservice URL=' $CREDITSCORE_URL
              if curl -X POST -H "Content-Type: application/json" -X POST -d '{"firstname":"John","lastname":"Doe","dateofbirth":"01/01/2015","ssn":"111223333"}' $CREDITSCORE_URL | grep "firstname"
              then
                  # if the keyword is in the conent
                  echo "Test passed"
              else
                  echo "Test failed"
                  exit -1
              fi
              sleep 1

ui-functional-test:
  box:
    id: peternagy/chrome-protractor-headless-test:node9.2-chrome62
  steps:
    - script:
        name: Run UI test
        code: | 
              nohup node $WERCKER_ROOT/app.js > creditscoreapp.log &
              echo 'Application URL to test: http://localhost:3000/creditscore'
              protractor $WERCKER_ROOT/test/protractor.conf.js
              exit_status=$?
              echo 'CreditScore app server log :::START'
              cat creditscoreapp.log
              echo 'CreditScore app server log :::END'
              if [ $exit_status -eq 0 ]; then
                echo "UI test passed"
              else
                echo "UI test failed"
                exit -1
              fi                
              
